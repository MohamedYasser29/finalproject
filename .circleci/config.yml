version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.3
commands:

  install_awscli:
     description: install aws cli on docker image
     steps:
      - run:
          name: install aws cli
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
     - run:
        name: Install Ansible
        command: |
          python3 -m pip install --user ansible

  install_nodejs:
     description: install nodeejs
     steps:
       - run:
          name: Install Nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install -g n
            sudo n 13.8.0
          
  # Install_tar_utilities:
  #    description: Install tar utility
  #    steps:
  #     - run:
  #         name: install tar
  #         command: |
  #           yum install -y tar gzip

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
         type: string 
         default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/GeE6wL8XdvZTbrr3ZfDaE2/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              #  Add revert code here. You can find this in the Getting Started section.
              #  exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dev]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dev

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dev]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dev

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dev]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dev]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dev]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dev]
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
             
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
               
               
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                # echo [all] .circleci/ansible/inventory.txt
                aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople" \
                    --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      -   destroy-environment

  # configure-infrastructure:
  #   docker:   
  #     - image: python:3.9-alpine3.16 #cimg/python:3.10 #python:3.7-alpine3.11  #amazon/aws-cli 
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #           # You can get this ID in the section where you registered the SSH Key             apk add --update awscli
  #           fingerprints: ["aa:a7:a4:13:3f:7c:36:97:e7:6f:1e:21:84:bf:ac:0d"]
  #     - attach_workspace:
  #         at: ~/
        
  #     - run:
  #        name: Install Ansible
  #        command: |
  #               apk add --update ansible 

  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update tar gzip 
  #           apk --no-cache add curl
  #           apk add --no-cache \
  #                   python3 \
  #                   py3-pip \
  #               && pip3 install --upgrade pip \
  #               && pip3 install --no-cache-dir \
  #                   awscli \
  #               && rm -rf /var/cache/apk/*
  configure-infrastructure:
    docker:   
      - image: cimg/python:3.10 #cimg/python:3.10 #python:3.7-alpine3.11  #amazon/aws-cli 
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key             apk add --update awscli
            fingerprints: ["aa:a7:a4:13:3f:7c:36:97:e7:6f:1e:21:84:bf:ac:0d"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_ansible
      - install_nodejs   
           
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment
      


  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dev]
      - run:
           name: install aws-cli
           command: | 
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
#            #exit 1
      - run:
          name: Send migration results to kvdbio
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/GeE6wL8XdvZTbrr3ZfDaE2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      -  destroy-environment 
      -  revert-migrations

  deploy-frontend:
    docker:
     - image: cimg/python:3.10 #cimg/node:13.11.0 # Docker image here that supports AWS CLI or amazon cli image
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs      
      - restore_cache:
                keys: [frontend-dev]
      - attach_workspace:
         at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      # - destroy-environment
      # - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
          - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key             apk add --update awscli
            fingerprints: ["aa:a7:a4:13:3f:7c:36:97:e7:6f:1e:21:84:bf:ac:0d"]
      - attach_workspace:
         at: ~/       
      - restore_cache:
                keys: [backend-dev]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      # - run:
      #     name: Package backened
      #     command: |             
      #       cd backend
      #       npm i
      #       npm run build
      #       cd ..
      #       # # Zip the directory
      #       tar -C backend -czvf artifact.tar.gz .
      #       #tar -czf artifact.tar.gz dist/* package*
           # cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
            # export TYPEORM_MIGRATIONS_DIR=./migrations
            # export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            # export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      # - revert-migrations 

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]